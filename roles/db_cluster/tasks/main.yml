---
- name: Create network for database cluster
  docker_network:
    name: "{{ mysql_cluster_network }}"
    state: present

- name: Create directory for MySQL configuration
  file:
    path: /opt/mysql/conf.d
    state: directory
    mode: '0755'
  become: yes

- name: Copy my.cnf template
  template:
    src: my.cnf
    dest: /opt/mysql/conf.d/my.cnf
    mode: '0644'
  become: yes

- name: Create primary database node
  docker_container:
    name: mysql_primary
    image: mysql:8.0
    state: started
    restart_policy: always
    networks:
      - name: "{{ mysql_cluster_network }}"
    published_ports:
      - "{{ mysql_primary_port }}:3306"
      - "{{ mysql_primary_gr_port }}:33061"
    env:
      MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
      MYSQL_DATABASE: "{{ database_name }}"
      MYSQL_USER: "{{ database_user }}"
      MYSQL_PASSWORD: "{{ database_password }}"
    volumes:
      - primary_db_data:/var/lib/mysql
      - /opt/mysql/conf.d:/etc/mysql/conf.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --plugin-load-add=group_replication.so
      --group_replication=FORCE_PLUS_PERMANENT
      --group_replication_local_address="mysql_primary:{{ mysql_primary_gr_port }}"
      --group_replication_group_seeds="mysql_primary:{{ mysql_primary_gr_port }},mysql_secondary1:{{ mysql_secondary1_gr_port }},mysql_secondary2:{{ mysql_secondary2_gr_port }}"
      --group_replication_ip_allowlist="mysql_primary,mysql_secondary1,mysql_secondary2"
      --server-id={{ mysql_server_id_primary }}
      --log-bin=mysql-bin
      --binlog_checksum=NONE
      --gtid_mode=ON
      --enforce-gtid-consistency=ON
      --log-slave-updates=ON
      --transaction-write-set-extraction=XXHASH64
      --group_replication_group_name="{{ mysql_group_replication_name }}"
      --group_replication_start_on_boot=OFF
      --group_replication_bootstrap_group=OFF
      --group_replication_single_primary_mode=ON

- name: Wait for primary MySQL to be ready
  wait_for:
    port: "{{ mysql_primary_port }}"
    delay: 10
    timeout: 300
    state: started
    host: "127.0.0.1"

- name: Bootstrap primary node
  block:
    - name: Set bootstrap group ON
      mysql_query:
        login_host: "127.0.0.1"
        login_port: "{{ mysql_primary_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "SET GLOBAL group_replication_bootstrap_group=ON;"
      register: bootstrap_on
      until: bootstrap_on.failed == false
      retries: 12
      delay: 5

    - name: Create replication user
      mysql_query:
        login_host: "127.0.0.1"
        login_port: "{{ mysql_primary_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "CREATE USER IF NOT EXISTS '{{ mysql_replication_user }}'@'%' IDENTIFIED BY '{{ mysql_replication_password }}';"
      register: create_user
      until: create_user.failed == false
      retries: 12
      delay: 5

    - name: Grant replication privileges
      mysql_query:
        login_host: "127.0.0.1"
        login_port: "{{ mysql_primary_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "GRANT REPLICATION SLAVE ON *.* TO '{{ mysql_replication_user }}'@'%';"
      register: grant_privileges
      until: grant_privileges.failed == false
      retries: 12
      delay: 5

    - name: Flush replication privileges
      mysql_query:
        login_host: "127.0.0.1"
        login_port: "{{ mysql_primary_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "FLUSH PRIVILEGES;"
      register: flush_privileges
      until: flush_privileges.failed == false
      retries: 12
      delay: 5

    - name: Start group replication
      mysql_query:
        login_host: "127.0.0.1"
        login_port: "{{ mysql_primary_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "START GROUP_REPLICATION;"
      register: start_replication
      until: start_replication.failed == false
      retries: 12
      delay: 5

    - name: Set bootstrap group OFF
      mysql_query:
        login_host: "127.0.0.1"
        login_port: "{{ mysql_primary_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "SET GLOBAL group_replication_bootstrap_group=OFF;"
      register: bootstrap_off
      until: bootstrap_off.failed == false
      retries: 12
      delay: 5

- name: Create and configure secondary nodes
  block:
    - name: Create secondary node 1
      docker_container:
        name: "mysql_secondary1"
        image: mysql:8.0
        state: started
        restart_policy: always
        networks:
          - name: "{{ mysql_cluster_network }}"
        published_ports:
          - "{{ mysql_secondary1_port }}:3306"
          - "{{ mysql_secondary1_gr_port }}:33061"
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
          MYSQL_DATABASE: "{{ database_name }}"
          MYSQL_USER: "{{ database_user }}"
          MYSQL_PASSWORD: "{{ database_password }}"
        volumes:
          - secondary1_db_data:/var/lib/mysql
          - /opt/mysql/conf.d:/etc/mysql/conf.d
        command: >
          --default-authentication-plugin=mysql_native_password
          --plugin-load-add=group_replication.so
          --group_replication=FORCE_PLUS_PERMANENT
          --group_replication_local_address="mysql_secondary1:{{ mysql_secondary1_gr_port }}"
          --group_replication_group_seeds="mysql_primary:{{ mysql_primary_gr_port }},mysql_secondary1:{{ mysql_secondary1_gr_port }},mysql_secondary2:{{ mysql_secondary2_gr_port }}"
          --group_replication_ip_allowlist="mysql_primary,mysql_secondary1,mysql_secondary2"
          --server-id={{ mysql_server_id_secondary1 }}
          --log-bin='mysql-bin'
          --binlog_checksum=NONE
          --gtid_mode=ON
          --enforce-gtid-consistency=ON
          --log-slave-updates=ON
          --transaction-write-set-extraction=XXHASH64
          --group_replication_group_name="{{ mysql_group_replication_name }}"
          --group_replication_start_on_boot=OFF
          --group_replication_single_primary_mode=ON

    - name: Wait for secondary1 to be ready
      wait_for:
        port: "{{ mysql_secondary1_port }}"
        delay: 15
        timeout: 600
        state: started
        host: "127.0.0.1"

    - name: Start secondary1 replication
      mysql_query:
        login_host: "127.0.0.1"
        login_port: "{{ mysql_secondary1_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "START GROUP_REPLICATION;"
      register: secondary1_repl_start
      until: secondary1_repl_start.failed == false
      retries: 6
      delay: 5

    - name: Create secondary node 2
      docker_container:
        name: "mysql_secondary2"
        image: mysql:8.0
        state: started
        restart_policy: always
        networks:
          - name: "{{ mysql_cluster_network }}"
        published_ports:
          - "{{ mysql_secondary2_port }}:3306"
          - "{{ mysql_secondary2_gr_port }}:33061"
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
          MYSQL_DATABASE: "{{ database_name }}"
          MYSQL_USER: "{{ database_user }}"
          MYSQL_PASSWORD: "{{ database_password }}"
        volumes:
          - secondary2_db_data:/var/lib/mysql
          - /opt/mysql/conf.d:/etc/mysql/conf.d
        command: >
          --default-authentication-plugin=mysql_native_password
          --plugin-load-add=group_replication.so
          --group_replication=FORCE_PLUS_PERMANENT
          --group_replication_local_address="mysql_secondary2:{{ mysql_secondary2_gr_port }}"
          --group_replication_group_seeds="mysql_primary:{{ mysql_primary_gr_port }},mysql_secondary1:{{ mysql_secondary1_gr_port }},mysql_secondary2:{{ mysql_secondary2_gr_port }}"
          --group_replication_ip_allowlist="mysql_primary,mysql_secondary1,mysql_secondary2"
          --server-id={{ mysql_server_id_secondary2 }}
          --log-bin='mysql-bin'
          --binlog_checksum=NONE
          --gtid_mode=ON
          --enforce-gtid-consistency=ON
          --log-slave-updates=ON
          --transaction-write-set-extraction=XXHASH64
          --group_replication_group_name="{{ mysql_group_replication_name }}"
          --group_replication_start_on_boot=OFF
          --group_replication_single_primary_mode=ON

    - name: Wait for secondary2 to be ready
      wait_for:
        port: "{{ mysql_secondary2_port }}"
        delay: 15
        timeout: 600
        state: started
        host: "127.0.0.1"

    - name: Start secondary2 replication
      mysql_query:
        login_host: "127.0.0.1"
        login_port: "{{ mysql_secondary2_port }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        query: "START GROUP_REPLICATION;"
      register: secondary2_repl_start
      until: secondary2_repl_start.failed == false
      retries: 12
      delay: 5

- name: Verify group replication status
  mysql_query:
    login_host: "127.0.0.1"
    login_port: "{{ mysql_primary_port }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
    query: SELECT COUNT(*) as members FROM performance_schema.replication_group_members WHERE MEMBER_STATE = 'ONLINE';
  register: replication_status
  until: replication_status.results[0].members == 3
  retries: 6
  delay: 10